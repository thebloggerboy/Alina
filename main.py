import os
import logging
from threading import Thread
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, ContextTypes, ChatJoinRequestHandler, CommandHandler
from dotenv import load_dotenv

# ‡§π‡§Æ‡§æ‡§∞‡•á ‡§¨‡§®‡§æ‡§è ‡§π‡•Å‡§è ‡§Æ‡•â‡§°‡•ç‡§Ø‡•Ç‡§≤‡•ç‡§∏ ‡§ï‡•ã ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
from config import ADMIN_IDS, MAIN_CHANNEL_LINK

load_dotenv()
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")

# --- ‡§´‡•à‡§Ç‡§∏‡•Ä ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ---
START_MESSAGE = "H·¥á ü ü·¥è! I'·¥ç A ü…™…¥·¥Ä,  è·¥è·¥ú Ä ·¥Ä·¥ú·¥õ·¥è-·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥Ä ü ·¥Äss…™s·¥õ·¥Ä…¥·¥õ. I'·¥ç ·¥°·¥è Ä·¥ã…™…¥…¢ ·¥ò·¥á Ä“ì·¥á·¥Ñ·¥õ ü è!"
MAIN_CHANNEL_PROMPT = "T·¥è …¢·¥á·¥õ ·¥Ä·¥Ñ·¥Ñ·¥áss, ·¥ò ü·¥á·¥Äs·¥á ·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥ç·¥Ä…™…¥ …¥·¥á·¥õ·¥°·¥è Ä·¥ã."

# --- Keep-Alive ‡§∏‡§∞‡•ç‡§µ‡§∞ ---
app = Flask('')
@app.route('/')
def home():
    return "Alina Bot is alive and running!"
def run_flask():
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))
def keep_alive():
    Thread(target=run_flask).start()

# --- ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ ---
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/start ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    keyboard = [[InlineKeyboardButton("üöÄ J·¥è…™…¥ M·¥Ä…™…¥ C ú·¥Ä…¥…¥·¥á ü üöÄ", url=MAIN_CHANNEL_LINK)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(MAIN_CHANNEL_PROMPT, reply_markup=reply_markup)

async def new_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡§®‡§à ‡§ú‡•ç‡§µ‡§æ‡§á‡§® ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§ï‡•ã ‡§ë‡§ü‡•ã-‡§Ö‡§™‡•ç‡§∞‡•Ç‡§µ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    try:
        await update.chat_join_request.approve()
        logger.info(f"A·¥ò·¥ò Ä·¥è·¥†·¥á·¥Ö ·¥ä·¥è…™…¥  Ä·¥á«´·¥ú·¥ás·¥õ “ì Ä·¥è·¥ç {update.chat_join_request.from_user.id} “ì·¥è Ä ·¥Ñ ú·¥Ä·¥õ {update.chat_join_request.chat.id}")
    except Exception as e:
        logger.error(f"F·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥á ·¥ä·¥è…™…¥  Ä·¥á«´·¥ú·¥ás·¥õ: {e}")
        if ADMIN_IDS:
            try:
                await context.bot.send_message(chat_id=ADMIN_IDS[0], text=f"‚ö†Ô∏è E Ä Ä·¥è Ä ·¥Ä·¥ò·¥ò Ä·¥è·¥†…™…¥…¢  Ä·¥á«´·¥ú·¥ás·¥õ: {e}")
            except Exception as admin_e:
                logger.error(f"F·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è s·¥á…¥·¥Ö ·¥á Ä Ä·¥è Ä …¥·¥è·¥õ…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ ·¥õ·¥è ·¥Ä·¥Ö·¥ç…™…¥: {admin_e}")

async def status_check_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•ã ‡§¨‡•â‡§ü ‡§ï‡•á ‡§ö‡§≤‡§®‡•á ‡§ï‡•Ä ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§¶‡•á‡§§‡§æ ‡§π‡•à‡•§"""
    if update.effective_user.id in ADMIN_IDS:
        await update.message.reply_text(START_MESSAGE)

# --- ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ---
def main():
    if not TOKEN:
        logger.critical("TELEGRAM_BOT_TOKEN …¥·¥è·¥õ s·¥á·¥õ! B·¥è·¥õ ·¥Ñ·¥Ä…¥…¥·¥è·¥õ s·¥õ·¥Ä Ä·¥õ.")
        return

    application = Application.builder().token(TOKEN).build()
    
    # ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç
    application.add_handler(ChatJoinRequestHandler(new_join_request))
    application.add_handler(CommandHandler("start", start_handler))
    application.add_handler(CommandHandler("status", status_check_handler)) # ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ï‡§Æ‡§æ‡§Ç‡§°
    
    keep_alive()
    logger.info("A ü…™…¥·¥Ä B·¥è·¥õ …™s  Ä·¥á·¥Ä·¥Ö è ·¥Ä…¥·¥Ö ·¥ò·¥è ü ü…™…¥…¢!")
    application.run_polling()

if __name__ == '__main__':
    main()